#include <windows.h>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class SegmentTree {
private:
    vector<int> tree;  // –¥–µ—Ä–µ–≤–æ –æ—Ç—Ä–µ–∑–∫–æ–≤: —Ö—Ä–∞–Ω–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π
    vector<int> arr;   // –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
    int n;             // —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞

    void build(int v, int tl, int tr) {
        if (tl == tr) {
            tree[v] = (arr[tl] == 0) ? 1 : 0;
        } else {
            int tm = (tl + tr) / 2;
            build(v*2, tl, tm);
            build(v*2+1, tm+1, tr);
            tree[v] = tree[v*2] + tree[v*2+1];
        }
    }

    void update(int v, int tl, int tr, int pos, int val) {
        if (tl == tr) {
            arr[pos] = val;
            tree[v] = (val == 0) ? 1 : 0;
        } else {
            int tm = (tl + tr) / 2;
            if (pos <= tm)
                update(v*2, tl, tm, pos, val);
            else
                update(v*2+1, tm+1, tr, pos, val);
            tree[v] = tree[v*2] + tree[v*2+1];
        }
    }

    int query(int v, int tl, int tr, int l, int r) {
        if (l > r)
            return 0;
        if (l == tl && r == tr) {
            return tree[v];
        }
        int tm = (tl + tr) / 2;
        return query(v*2, tl, tm, l, min(r, tm))
             + query(v*2+1, tm+1, tr, max(l, tm+1), r);
    }

    int findKthZero(int v, int tl, int tr, int k) {
        if (k > tree[v]) // –µ—Å–ª–∏ k-–≥–æ –Ω—É–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          return -1;
        if (tl == tr)
          return tl; // –Ω–∞—à–ª–∏ –ª–∏—Å—Ç ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è k-–≥–æ –Ω—É–ª—è
        int tm = (tl + tr) / 2;
        if (tree[v*2] >= k) {
          // k-–π –Ω–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
          return findKthZero(v*2, tl, tm, k);
        } else {
          // –∏–Ω–∞—á–µ ‚Äî –≤ –ø—Ä–∞–≤–æ–π, –≤—ã—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π —Å–ª–µ–≤–∞
          return findKthZero(v*2+1, tm+1, tr, k - tree[v*2]);
        }
      }

public:
    SegmentTree(vector<int>& input) : arr(input), n(input.size()) {
        tree.resize(4 * n);
        build(1, 0, n - 1);
    }

    void update(int pos, int val) {
        update(1, 0, n - 1, pos, val);
    }

    int query(int l, int r) {
        return query(1, 0, n - 1, l, r);
    }

    int findKthZero(int k) {
        return findKthZero(1, 0, n - 1, k);
    }

    void printTree() {
        cout << "Tree: ";
        for (int i = 1; i < 4 * n && i < (int)tree.size(); ++i) {
            cout << tree[i] << " ";
        }
        cout << endl;
    }

    void printArray() {
        cout << "–ú–∞—Å—Å–∏–≤: ";
        for (int i = 0; i < n; ++i) {
          cout << arr[i];
          if (i < n - 1) cout << " ";
        }
        cout << endl;
      }

};

int main() {
    SetConsoleOutputCP(CP_UTF8); // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Windows

    int N;
    cin >> N;

    vector<int> inputArray(N);
    for (int i = 0; i < N; ++i) {
      cin >> inputArray[i];
    }

    //vector<int> a = {0, 1, 0, 2, 0, 3, 0, 4}; - –ø—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    // 0 1 0 2 0 3 0 4 - –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Å–æ–ª–∏ (8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    SegmentTree segmentTree(inputArray);

    cout << "–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π –Ω–∞ [0, 7]: " << segmentTree.query(0, 7) << endl;
    cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π –Ω–∞ [2, 5]: " << segmentTree.query(2, 5) << endl;

    segmentTree.update(2, 5);
    cout << "–ü–æ—Å–ª–µ update(2, 5): –Ω—É–ª–µ–π –Ω–∞ [0,7]: " << segmentTree.query(0, 7) << endl;

    segmentTree.update(3, 0);
    cout << "–ü–æ—Å–ª–µ update(3, 0): –Ω—É–ª–µ–π –Ω–∞ [0,7]: " << segmentTree.query(0, 7) << endl;

    cout << "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞: ";
    segmentTree.printArray();  // <-- –Ω–∞—à –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥

    // üëá –ù–û–í–û–ï: –ø–æ–∏—Å–∫ k-–≥–æ –Ω—É–ª—è
    cout << "\n=== –ü–æ–∏—Å–∫ k-–≥–æ –Ω—É–ª—è ===" << endl;
    for (int k = 1; k <= segmentTree.query(0, 7); ++k) {
      int idx = segmentTree.findKthZero(k);
      cout << k << "-–π –Ω–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∏–Ω–¥–µ–∫—Å—É: " << idx
           << " (–∑–Ω–∞—á–µ–Ω–∏–µ: " << inputArray[idx] << ")" << endl;
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    int k = 10;
    int idx = segmentTree.findKthZero(k);
    if (idx == -1) {
      cout << "\n" << k << "-–π –Ω–æ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." << endl;
    }

    cout << "\n=== –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –æ—Ç—Ä–µ–∑–∫–æ–≤ (tree[1..]) ===" << endl;
    segmentTree.printTree();

    return 0;
}







